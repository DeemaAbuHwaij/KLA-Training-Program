# Build Process – Topic 9: Packer – Creating Prebuilt Machine Images

## What Was Built

A reusable **Windows Server 2019 AMI** with **Python 3.10.0** pre-installed using **Packer** and **PowerShell provisioning**.
This image can be used to launch new **EC2 instances** with Python already installed and configured in the system PATH.

---

## Configuration

- **Builder**: `amazon-ebs`
- **Region**: `us-west-1` (or your chosen AWS region)
- **Instance Type**: `t2.micro`
- **Provisioner**: PowerShell script
- **Base Image (AMI)**: Public Windows Server 2019 base AMI
- **Python Version Installed**: `3.10.0`

---

## Provisioning Steps

The provisioning script:

- Downloads the Python 3.10.0 installer from python.org
- Installs it silently using `/quiet`
- Adds it to the system PATH
- Verifies the installation using:
  - `python --version`

---

## Output Image

- **AMI Name**: `windows-python-<timestamp>`
- **AMI Region**: As configured (e.g., `us-west-1`)
- **AMI ID**: Displayed in the Packer CLI output

You can find the image in the **AWS EC2 Console → AMIs** section.

---

## Cleanup & Automation

- Packer automatically launched a temporary EC2 instance, installed Python, created an AMI snapshot, and then terminated the instance.
- No manual cleanup is required.

---

## Verified Output

Example Packer confirmation output:
```
==> amazon-ebs: AMI: ami-0d94c1edb53740e3c
==> amazon-ebs: Successfully installed Python 3.10.0
```